"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/get-it";
exports.ids = ["vendor-chunks/get-it"];
exports.modules = {

/***/ "(rsc)/./node_modules/get-it/dist/_chunks/createRequester-ryeXkh0z.js":
/*!**********************************************************************!*\
  !*** ./node_modules/get-it/dist/_chunks/createRequester-ryeXkh0z.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRequester: () => (/* binding */ createRequester)\n/* harmony export */ });\n/* harmony import */ var _defaultOptionsValidator_dittwL7d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultOptionsValidator-dittwL7d.js */ \"(rsc)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-dittwL7d.js\");\n\nconst middlewareReducer = (middleware)=>function applyMiddleware(hook, defaultValue) {\n        const bailEarly = hook === \"onError\";\n        let value = defaultValue;\n        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            args[_key - 2] = arguments[_key];\n        }\n        for(let i = 0; i < middleware[hook].length; i++){\n            const handler = middleware[hook][i];\n            value = handler(value, ...args);\n            if (bailEarly && !value) {\n                break;\n            }\n        }\n        return value;\n    };\nfunction createPubSub() {\n    const subscribers = /* @__PURE__ */ Object.create(null);\n    let nextId = 0;\n    function subscribe(subscriber) {\n        const id = nextId++;\n        subscribers[id] = subscriber;\n        return function unsubscribe() {\n            delete subscribers[id];\n        };\n    }\n    function publish(event) {\n        for(const id in subscribers){\n            subscribers[id](event);\n        }\n    }\n    return {\n        publish,\n        subscribe\n    };\n}\nconst channelNames = [\n    \"request\",\n    \"response\",\n    \"progress\",\n    \"error\",\n    \"abort\"\n];\nconst middlehooks = [\n    \"processOptions\",\n    \"validateOptions\",\n    \"interceptRequest\",\n    \"finalizeOptions\",\n    \"onRequest\",\n    \"onResponse\",\n    \"onError\",\n    \"onReturn\",\n    \"onHeaders\"\n];\nfunction createRequester(initMiddleware, httpRequest) {\n    const loadedMiddleware = [];\n    const middleware = middlehooks.reduce((ware, name)=>{\n        ware[name] = ware[name] || [];\n        return ware;\n    }, {\n        processOptions: [\n            _defaultOptionsValidator_dittwL7d_js__WEBPACK_IMPORTED_MODULE_0__.processOptions\n        ],\n        validateOptions: [\n            _defaultOptionsValidator_dittwL7d_js__WEBPACK_IMPORTED_MODULE_0__.validateOptions\n        ]\n    });\n    function request(opts) {\n        const onResponse = (reqErr, res, ctx)=>{\n            let error = reqErr;\n            let response = res;\n            if (!error) {\n                try {\n                    response = applyMiddleware(\"onResponse\", res, ctx);\n                } catch (err) {\n                    response = null;\n                    error = err;\n                }\n            }\n            error = error && applyMiddleware(\"onError\", error, ctx);\n            if (error) {\n                channels.error.publish(error);\n            } else if (response) {\n                channels.response.publish(response);\n            }\n        };\n        const channels = channelNames.reduce((target, name)=>{\n            target[name] = createPubSub();\n            return target;\n        }, {});\n        const applyMiddleware = middlewareReducer(middleware);\n        const options = applyMiddleware(\"processOptions\", opts);\n        applyMiddleware(\"validateOptions\", options);\n        const context = {\n            options,\n            channels,\n            applyMiddleware\n        };\n        let ongoingRequest;\n        const unsubscribe = channels.request.subscribe((ctx)=>{\n            ongoingRequest = httpRequest(ctx, (err, res)=>onResponse(err, res, ctx));\n        });\n        channels.abort.subscribe(()=>{\n            unsubscribe();\n            if (ongoingRequest) {\n                ongoingRequest.abort();\n            }\n        });\n        const returnValue = applyMiddleware(\"onReturn\", channels, context);\n        if (returnValue === channels) {\n            channels.request.publish(context);\n        }\n        return returnValue;\n    }\n    request.use = function use(newMiddleware) {\n        if (!newMiddleware) {\n            throw new Error(\"Tried to add middleware that resolved to falsey value\");\n        }\n        if (typeof newMiddleware === \"function\") {\n            throw new Error(\"Tried to add middleware that was a function. It probably expects you to pass options to it.\");\n        }\n        if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n            throw new Error(\"Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event\");\n        }\n        middlehooks.forEach((key)=>{\n            if (newMiddleware[key]) {\n                middleware[key].push(newMiddleware[key]);\n            }\n        });\n        loadedMiddleware.push(newMiddleware);\n        return request;\n    };\n    request.clone = ()=>createRequester(loadedMiddleware, httpRequest);\n    initMiddleware.forEach(request.use);\n    return request;\n}\n //# sourceMappingURL=createRequester-ryeXkh0z.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/get-it/dist/_chunks/createRequester-ryeXkh0z.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-dittwL7d.js":
/*!******************************************************************************!*\
  !*** ./node_modules/get-it/dist/_chunks/defaultOptionsValidator-dittwL7d.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processOptions: () => (/* binding */ processOptions),\n/* harmony export */   validateOptions: () => (/* binding */ validateOptions)\n/* harmony export */ });\nconst isReactNative = typeof navigator === \"undefined\" ? false : navigator.product === \"ReactNative\";\nconst defaultOptions = {\n    timeout: isReactNative ? 6e4 : 12e4\n};\nconst processOptions = function processOptions2(opts) {\n    const options = {\n        ...defaultOptions,\n        ...typeof opts === \"string\" ? {\n            url: opts\n        } : opts\n    };\n    const { searchParams } = new URL(options.url, \"http://localhost\");\n    options.timeout = normalizeTimeout(options.timeout);\n    if (options.query) {\n        for (const [key, value] of Object.entries(options.query)){\n            if (value !== void 0) {\n                if (Array.isArray(value)) {\n                    for (const v of value){\n                        searchParams.append(key, v);\n                    }\n                } else {\n                    searchParams.append(key, value);\n                }\n            }\n        }\n    }\n    const [url] = options.url.split(\"?\");\n    const search = searchParams.toString();\n    if (search) {\n        options.url = \"\".concat(url, \"?\").concat(search);\n    }\n    options.method = options.body && !options.method ? \"POST\" : (options.method || \"GET\").toUpperCase();\n    return options;\n};\nfunction normalizeTimeout(time) {\n    if (time === false || time === 0) {\n        return false;\n    }\n    if (time.connect || time.socket) {\n        return time;\n    }\n    const delay = Number(time);\n    if (isNaN(delay)) {\n        return normalizeTimeout(defaultOptions.timeout);\n    }\n    return {\n        connect: delay,\n        socket: delay\n    };\n}\nconst validUrl = /^https?:\\/\\//i;\nconst validateOptions = function validateOptions2(options) {\n    if (!validUrl.test(options.url)) {\n        throw new Error('\"'.concat(options.url, '\" is not a valid URL'));\n    }\n};\n //# sourceMappingURL=defaultOptionsValidator-dittwL7d.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ2V0LWl0L2Rpc3QvX2NodW5rcy9kZWZhdWx0T3B0aW9uc1ZhbGlkYXRvci1kaXR0d0w3ZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLGdCQUFnQixPQUFPQyxjQUFjLGNBQWMsUUFBUUEsVUFBVUMsT0FBTyxLQUFLO0FBQ3ZGLE1BQU1DLGlCQUFpQjtJQUNyQkMsU0FBU0osZ0JBQWdCLE1BQU07QUFDakM7QUFDQSxNQUFNSyxpQkFBaUIsU0FBU0MsZ0JBQWdCQyxJQUFJO0lBQ2xELE1BQU1DLFVBQVU7UUFDZCxHQUFHTCxjQUFjO1FBQ2pCLEdBQUksT0FBT0ksU0FBUyxXQUFXO1lBQzdCRSxLQUFLRjtRQUNQLElBQUlBLElBQUk7SUFDVjtJQUNBLE1BQU0sRUFDSkcsWUFBWSxFQUNiLEdBQUcsSUFBSUMsSUFBSUgsUUFBUUMsR0FBRyxFQUFFO0lBQ3pCRCxRQUFRSixPQUFPLEdBQUdRLGlCQUFpQkosUUFBUUosT0FBTztJQUNsRCxJQUFJSSxRQUFRSyxLQUFLLEVBQUU7UUFDakIsS0FBSyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDVCxRQUFRSyxLQUFLLEVBQUc7WUFDeEQsSUFBSUUsVUFBVSxLQUFLLEdBQUc7Z0JBQ3BCLElBQUlHLE1BQU1DLE9BQU8sQ0FBQ0osUUFBUTtvQkFDeEIsS0FBSyxNQUFNSyxLQUFLTCxNQUFPO3dCQUNyQkwsYUFBYVcsTUFBTSxDQUFDUCxLQUFLTTtvQkFDM0I7Z0JBQ0YsT0FBTztvQkFDTFYsYUFBYVcsTUFBTSxDQUFDUCxLQUFLQztnQkFDM0I7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxNQUFNLENBQUNOLElBQUksR0FBR0QsUUFBUUMsR0FBRyxDQUFDYSxLQUFLLENBQUM7SUFDaEMsTUFBTUMsU0FBU2IsYUFBYWMsUUFBUTtJQUNwQyxJQUFJRCxRQUFRO1FBQ1ZmLFFBQVFDLEdBQUcsR0FBRyxHQUFHZ0IsTUFBTSxDQUFDaEIsS0FBSyxLQUFLZ0IsTUFBTSxDQUFDRjtJQUMzQztJQUNBZixRQUFRa0IsTUFBTSxHQUFHbEIsUUFBUW1CLElBQUksSUFBSSxDQUFDbkIsUUFBUWtCLE1BQU0sR0FBRyxTQUFTLENBQUNsQixRQUFRa0IsTUFBTSxJQUFJLEtBQUksRUFBR0UsV0FBVztJQUNqRyxPQUFPcEI7QUFDVDtBQUNBLFNBQVNJLGlCQUFpQmlCLElBQUk7SUFDNUIsSUFBSUEsU0FBUyxTQUFTQSxTQUFTLEdBQUc7UUFDaEMsT0FBTztJQUNUO0lBQ0EsSUFBSUEsS0FBS0MsT0FBTyxJQUFJRCxLQUFLRSxNQUFNLEVBQUU7UUFDL0IsT0FBT0Y7SUFDVDtJQUNBLE1BQU1HLFFBQVFDLE9BQU9KO0lBQ3JCLElBQUlLLE1BQU1GLFFBQVE7UUFDaEIsT0FBT3BCLGlCQUFpQlQsZUFBZUMsT0FBTztJQUNoRDtJQUNBLE9BQU87UUFDTDBCLFNBQVNFO1FBQ1RELFFBQVFDO0lBQ1Y7QUFDRjtBQUNBLE1BQU1HLFdBQVc7QUFDakIsTUFBTUMsa0JBQWtCLFNBQVNDLGlCQUFpQjdCLE9BQU87SUFDdkQsSUFBSSxDQUFDMkIsU0FBU0csSUFBSSxDQUFDOUIsUUFBUUMsR0FBRyxHQUFHO1FBQy9CLE1BQU0sSUFBSThCLE1BQU0sSUFBSWQsTUFBTSxDQUFDakIsUUFBUUMsR0FBRyxFQUFFO0lBQzFDO0FBQ0Y7QUFDMkMsQ0FDM0MsNERBQTREIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWNvbW1lcmNlLXl0LWJ5LW1pa2UvLi9ub2RlX21vZHVsZXMvZ2V0LWl0L2Rpc3QvX2NodW5rcy9kZWZhdWx0T3B0aW9uc1ZhbGlkYXRvci1kaXR0d0w3ZC5qcz81MTgwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlzUmVhY3ROYXRpdmUgPSB0eXBlb2YgbmF2aWdhdG9yID09PSBcInVuZGVmaW5lZFwiID8gZmFsc2UgOiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gXCJSZWFjdE5hdGl2ZVwiO1xuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHRpbWVvdXQ6IGlzUmVhY3ROYXRpdmUgPyA2ZTQgOiAxMmU0XG59O1xuY29uc3QgcHJvY2Vzc09wdGlvbnMgPSBmdW5jdGlvbiBwcm9jZXNzT3B0aW9uczIob3B0cykge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgIC4uLih0eXBlb2Ygb3B0cyA9PT0gXCJzdHJpbmdcIiA/IHtcbiAgICAgIHVybDogb3B0c1xuICAgIH0gOiBvcHRzKVxuICB9O1xuICBjb25zdCB7XG4gICAgc2VhcmNoUGFyYW1zXG4gIH0gPSBuZXcgVVJMKG9wdGlvbnMudXJsLCBcImh0dHA6Ly9sb2NhbGhvc3RcIik7XG4gIG9wdGlvbnMudGltZW91dCA9IG5vcm1hbGl6ZVRpbWVvdXQob3B0aW9ucy50aW1lb3V0KTtcbiAgaWYgKG9wdGlvbnMucXVlcnkpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvcHRpb25zLnF1ZXJ5KSkge1xuICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgZm9yIChjb25zdCB2IG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgW3VybF0gPSBvcHRpb25zLnVybC5zcGxpdChcIj9cIik7XG4gIGNvbnN0IHNlYXJjaCA9IHNlYXJjaFBhcmFtcy50b1N0cmluZygpO1xuICBpZiAoc2VhcmNoKSB7XG4gICAgb3B0aW9ucy51cmwgPSBcIlwiLmNvbmNhdCh1cmwsIFwiP1wiKS5jb25jYXQoc2VhcmNoKTtcbiAgfVxuICBvcHRpb25zLm1ldGhvZCA9IG9wdGlvbnMuYm9keSAmJiAhb3B0aW9ucy5tZXRob2QgPyBcIlBPU1RcIiA6IChvcHRpb25zLm1ldGhvZCB8fCBcIkdFVFwiKS50b1VwcGVyQ2FzZSgpO1xuICByZXR1cm4gb3B0aW9ucztcbn07XG5mdW5jdGlvbiBub3JtYWxpemVUaW1lb3V0KHRpbWUpIHtcbiAgaWYgKHRpbWUgPT09IGZhbHNlIHx8IHRpbWUgPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHRpbWUuY29ubmVjdCB8fCB0aW1lLnNvY2tldCkge1xuICAgIHJldHVybiB0aW1lO1xuICB9XG4gIGNvbnN0IGRlbGF5ID0gTnVtYmVyKHRpbWUpO1xuICBpZiAoaXNOYU4oZGVsYXkpKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVRpbWVvdXQoZGVmYXVsdE9wdGlvbnMudGltZW91dCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjb25uZWN0OiBkZWxheSxcbiAgICBzb2NrZXQ6IGRlbGF5XG4gIH07XG59XG5jb25zdCB2YWxpZFVybCA9IC9eaHR0cHM/OlxcL1xcLy9pO1xuY29uc3QgdmFsaWRhdGVPcHRpb25zID0gZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zMihvcHRpb25zKSB7XG4gIGlmICghdmFsaWRVcmwudGVzdChvcHRpb25zLnVybCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJy5jb25jYXQob3B0aW9ucy51cmwsICdcIiBpcyBub3QgYSB2YWxpZCBVUkwnKSk7XG4gIH1cbn07XG5leHBvcnQgeyBwcm9jZXNzT3B0aW9ucywgdmFsaWRhdGVPcHRpb25zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0T3B0aW9uc1ZhbGlkYXRvci1kaXR0d0w3ZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc1JlYWN0TmF0aXZlIiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImRlZmF1bHRPcHRpb25zIiwidGltZW91dCIsInByb2Nlc3NPcHRpb25zIiwicHJvY2Vzc09wdGlvbnMyIiwib3B0cyIsIm9wdGlvbnMiLCJ1cmwiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJub3JtYWxpemVUaW1lb3V0IiwicXVlcnkiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJBcnJheSIsImlzQXJyYXkiLCJ2IiwiYXBwZW5kIiwic3BsaXQiLCJzZWFyY2giLCJ0b1N0cmluZyIsImNvbmNhdCIsIm1ldGhvZCIsImJvZHkiLCJ0b1VwcGVyQ2FzZSIsInRpbWUiLCJjb25uZWN0Iiwic29ja2V0IiwiZGVsYXkiLCJOdW1iZXIiLCJpc05hTiIsInZhbGlkVXJsIiwidmFsaWRhdGVPcHRpb25zIiwidmFsaWRhdGVPcHRpb25zMiIsInRlc3QiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-dittwL7d.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/get-it/dist/index.react-server.js":
/*!********************************************************!*\
  !*** ./node_modules/get-it/dist/index.react-server.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adapter: () => (/* binding */ adapter),\n/* harmony export */   environment: () => (/* binding */ environment),\n/* harmony export */   getIt: () => (/* binding */ getIt)\n/* harmony export */ });\n/* harmony import */ var _chunks_createRequester_ryeXkh0z_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_chunks/createRequester-ryeXkh0z.js */ \"(rsc)/./node_modules/get-it/dist/_chunks/createRequester-ryeXkh0z.js\");\n/* harmony import */ var parse_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! parse-headers */ \"(rsc)/./node_modules/parse-headers/parse-headers.js\");\n\n\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _method, _url, _resHeaders, _headers, _controller, _init, _useAbortSignal;\nclass FetchXhr {\n    constructor(){\n        /**\n     * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n     */ this.readyState = 0;\n        this.responseType = \"\";\n        /**\n     * Private implementation details\n     */ __privateAdd(this, _method, void 0);\n        __privateAdd(this, _url, void 0);\n        __privateAdd(this, _resHeaders, void 0);\n        __privateAdd(this, _headers, {});\n        __privateAdd(this, _controller, void 0);\n        __privateAdd(this, _init, {});\n        __privateAdd(this, _useAbortSignal, void 0);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- _async is only declared for typings compatibility\n    open(method, url, _async) {\n        __privateSet(this, _method, method);\n        __privateSet(this, _url, url);\n        __privateSet(this, _resHeaders, \"\");\n        this.readyState = 1;\n        this.onreadystatechange();\n        __privateSet(this, _controller, void 0);\n    }\n    abort() {\n        if (__privateGet(this, _controller)) {\n            __privateGet(this, _controller).abort();\n        }\n    }\n    getAllResponseHeaders() {\n        return __privateGet(this, _resHeaders);\n    }\n    setRequestHeader(name, value) {\n        __privateGet(this, _headers)[name] = value;\n    }\n    // Allow setting extra fetch init options, needed for runtimes such as Vercel Edge to set `cache` and other options in React Server Components\n    setInit(init) {\n        let useAbortSignal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        __privateSet(this, _init, init);\n        __privateSet(this, _useAbortSignal, useAbortSignal);\n    }\n    send(body) {\n        const textBody = this.responseType !== \"arraybuffer\";\n        const options = {\n            ...__privateGet(this, _init),\n            method: __privateGet(this, _method),\n            headers: __privateGet(this, _headers),\n            body\n        };\n        if (typeof AbortController === \"function\" && __privateGet(this, _useAbortSignal)) {\n            __privateSet(this, _controller, new AbortController());\n            if (typeof EventTarget !== \"undefined\" && __privateGet(this, _controller).signal instanceof EventTarget) {\n                options.signal = __privateGet(this, _controller).signal;\n            }\n        }\n        if (typeof document !== \"undefined\") {\n            options.credentials = this.withCredentials ? \"include\" : \"omit\";\n        }\n        fetch(__privateGet(this, _url), options).then((res)=>{\n            res.headers.forEach((value, key)=>{\n                __privateSet(this, _resHeaders, __privateGet(this, _resHeaders) + \"\".concat(key, \": \").concat(value, \"\\r\\n\"));\n            });\n            this.status = res.status;\n            this.statusText = res.statusText;\n            this.readyState = 3;\n            return textBody ? res.text() : res.arrayBuffer();\n        }).then((resBody)=>{\n            if (typeof resBody === \"string\") {\n                this.responseText = resBody;\n            } else {\n                this.response = resBody;\n            }\n            this.readyState = 4;\n            this.onreadystatechange();\n        }).catch((err)=>{\n            var _a;\n            if (err.name === \"AbortError\") {\n                this.onabort();\n                return;\n            }\n            (_a = this.onerror) == null ? void 0 : _a.call(this, err);\n        });\n    }\n}\n_method = new WeakMap();\n_url = new WeakMap();\n_resHeaders = new WeakMap();\n_headers = new WeakMap();\n_controller = new WeakMap();\n_init = new WeakMap();\n_useAbortSignal = new WeakMap();\nconst adapter = typeof XMLHttpRequest === \"function\" ? \"xhr\" : \"fetch\";\nconst XmlHttpRequest = adapter === \"xhr\" ? XMLHttpRequest : FetchXhr;\nconst httpRequester = (context, callback)=>{\n    var _a;\n    const opts = context.options;\n    const options = context.applyMiddleware(\"finalizeOptions\", opts);\n    const timers = {};\n    const injectedResponse = context.applyMiddleware(\"interceptRequest\", void 0, {\n        adapter,\n        context\n    });\n    if (injectedResponse) {\n        const cbTimer = setTimeout(callback, 0, null, injectedResponse);\n        const cancel = ()=>clearTimeout(cbTimer);\n        return {\n            abort: cancel\n        };\n    }\n    let xhr = new XmlHttpRequest();\n    if (xhr instanceof FetchXhr && typeof options.fetch === \"object\") {\n        xhr.setInit(options.fetch, (_a = options.useAbortSignal) != null ? _a : true);\n    }\n    const headers = options.headers;\n    const delays = options.timeout;\n    let aborted = false;\n    let loaded = false;\n    let timedOut = false;\n    xhr.onerror = (event)=>{\n        onError(new Error(\"Request error while attempting to reach \".concat(options.url).concat(event.lengthComputable ? \"(\".concat(event.loaded, \" of \").concat(event.total, \" bytes transferred)\") : \"\")));\n    };\n    xhr.ontimeout = (event)=>{\n        onError(new Error(\"Request timeout while attempting to reach \".concat(options.url).concat(event.lengthComputable ? \"(\".concat(event.loaded, \" of \").concat(event.total, \" bytes transferred)\") : \"\")));\n    };\n    xhr.onabort = ()=>{\n        stopTimers(true);\n        aborted = true;\n    };\n    xhr.onreadystatechange = ()=>{\n        resetTimers();\n        if (aborted || xhr.readyState !== 4) {\n            return;\n        }\n        if (xhr.status === 0) {\n            return;\n        }\n        onLoad();\n    };\n    xhr.open(options.method, options.url, true);\n    xhr.withCredentials = !!options.withCredentials;\n    if (headers && xhr.setRequestHeader) {\n        for(const key in headers){\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    }\n    if (options.rawBody) {\n        xhr.responseType = \"arraybuffer\";\n    }\n    context.applyMiddleware(\"onRequest\", {\n        options,\n        adapter,\n        request: xhr,\n        context\n    });\n    xhr.send(options.body || null);\n    if (delays) {\n        timers.connect = setTimeout(()=>timeoutRequest(\"ETIMEDOUT\"), delays.connect);\n    }\n    return {\n        abort\n    };\n    function abort() {\n        aborted = true;\n        if (xhr) {\n            xhr.abort();\n        }\n    }\n    function timeoutRequest(code) {\n        timedOut = true;\n        xhr.abort();\n        const error = new Error(code === \"ESOCKETTIMEDOUT\" ? \"Socket timed out on request to \".concat(options.url) : \"Connection timed out on request to \".concat(options.url));\n        error.code = code;\n        context.channels.error.publish(error);\n    }\n    function resetTimers() {\n        if (!delays) {\n            return;\n        }\n        stopTimers();\n        timers.socket = setTimeout(()=>timeoutRequest(\"ESOCKETTIMEDOUT\"), delays.socket);\n    }\n    function stopTimers(force) {\n        if (force || aborted || xhr.readyState >= 2 && timers.connect) {\n            clearTimeout(timers.connect);\n        }\n        if (timers.socket) {\n            clearTimeout(timers.socket);\n        }\n    }\n    function onError(error) {\n        if (loaded) {\n            return;\n        }\n        stopTimers(true);\n        loaded = true;\n        xhr = null;\n        const err = error || new Error(\"Network error while attempting to reach \".concat(options.url));\n        err.isNetworkError = true;\n        err.request = options;\n        callback(err);\n    }\n    function reduceResponse() {\n        return {\n            body: xhr.response || (xhr.responseType === \"\" || xhr.responseType === \"text\" ? xhr.responseText : \"\"),\n            url: options.url,\n            method: options.method,\n            headers: parse_headers__WEBPACK_IMPORTED_MODULE_0__(xhr.getAllResponseHeaders()),\n            statusCode: xhr.status,\n            statusMessage: xhr.statusText\n        };\n    }\n    function onLoad() {\n        if (aborted || loaded || timedOut) {\n            return;\n        }\n        if (xhr.status === 0) {\n            onError(new Error(\"Unknown XHR error\"));\n            return;\n        }\n        stopTimers();\n        loaded = true;\n        callback(null, reduceResponse());\n    }\n};\nconst getIt = function() {\n    let initMiddleware = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let httpRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : httpRequester;\n    return (0,_chunks_createRequester_ryeXkh0z_js__WEBPACK_IMPORTED_MODULE_1__.createRequester)(initMiddleware, httpRequest);\n};\nconst environment = \"react-server\";\n //# sourceMappingURL=index.react-server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/get-it/dist/index.react-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/get-it/dist/middleware.browser.js":
/*!********************************************************!*\
  !*** ./node_modules/get-it/dist/middleware.browser.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cancel: () => (/* binding */ Cancel),\n/* harmony export */   CancelToken: () => (/* binding */ CancelToken),\n/* harmony export */   agent: () => (/* binding */ agent),\n/* harmony export */   base: () => (/* binding */ base),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   headers: () => (/* binding */ headers),\n/* harmony export */   httpErrors: () => (/* binding */ httpErrors),\n/* harmony export */   injectResponse: () => (/* binding */ injectResponse),\n/* harmony export */   jsonRequest: () => (/* binding */ jsonRequest),\n/* harmony export */   jsonResponse: () => (/* binding */ jsonResponse),\n/* harmony export */   keepAlive: () => (/* binding */ keepAlive),\n/* harmony export */   mtls: () => (/* binding */ mtls),\n/* harmony export */   observable: () => (/* binding */ observable),\n/* harmony export */   processOptions: () => (/* reexport safe */ _chunks_defaultOptionsValidator_dittwL7d_js__WEBPACK_IMPORTED_MODULE_1__.processOptions),\n/* harmony export */   progress: () => (/* binding */ progress),\n/* harmony export */   promise: () => (/* binding */ promise),\n/* harmony export */   proxy: () => (/* binding */ proxy),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   urlEncoded: () => (/* binding */ urlEncoded),\n/* harmony export */   validateOptions: () => (/* reexport safe */ _chunks_defaultOptionsValidator_dittwL7d_js__WEBPACK_IMPORTED_MODULE_1__.validateOptions)\n/* harmony export */ });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\");\n/* harmony import */ var _chunks_defaultOptionsValidator_dittwL7d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_chunks/defaultOptionsValidator-dittwL7d.js */ \"(rsc)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-dittwL7d.js\");\n/* harmony import */ var is_plain_object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! is-plain-object */ \"(rsc)/./node_modules/is-plain-object/dist/is-plain-object.mjs\");\n\n\n\nfunction agent(opts) {\n    return {};\n}\nconst leadingSlash = /^\\//;\nconst trailingSlash = /\\/$/;\nfunction base(baseUrl) {\n    const baseUri = baseUrl.replace(trailingSlash, \"\");\n    return {\n        processOptions: (options)=>{\n            if (/^https?:\\/\\//i.test(options.url)) {\n                return options;\n            }\n            const url = [\n                baseUri,\n                options.url.replace(leadingSlash, \"\")\n            ].join(\"/\");\n            return Object.assign({}, options, {\n                url\n            });\n        }\n    };\n}\nconst SENSITIVE_HEADERS = [\n    \"cookie\",\n    \"authorization\"\n];\nconst hasOwn = Object.prototype.hasOwnProperty;\nconst redactKeys = (source, redacted)=>{\n    const target = {};\n    for(const key in source){\n        if (hasOwn.call(source, key)) {\n            target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? \"<redacted>\" : source[key];\n        }\n    }\n    return target;\n};\nfunction debug() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const verbose = opts.verbose;\n    const namespace = opts.namespace || \"get-it\";\n    const defaultLogger = debug__WEBPACK_IMPORTED_MODULE_0__(namespace);\n    const log = opts.log || defaultLogger;\n    const shortCircuit = log === defaultLogger && !debug__WEBPACK_IMPORTED_MODULE_0__.enabled(namespace);\n    let requestId = 0;\n    return {\n        processOptions: (options)=>{\n            options.debug = log;\n            options.requestId = options.requestId || ++requestId;\n            return options;\n        },\n        onRequest: (event)=>{\n            if (shortCircuit || !event) {\n                return event;\n            }\n            const options = event.options;\n            log(\"[%s] HTTP %s %s\", options.requestId, options.method, options.url);\n            if (verbose && options.body && typeof options.body === \"string\") {\n                log(\"[%s] Request body: %s\", options.requestId, options.body);\n            }\n            if (verbose && options.headers) {\n                const headers = opts.redactSensitiveHeaders === false ? options.headers : redactKeys(options.headers, SENSITIVE_HEADERS);\n                log(\"[%s] Request headers: %s\", options.requestId, JSON.stringify(headers, null, 2));\n            }\n            return event;\n        },\n        onResponse: (res, context)=>{\n            if (shortCircuit || !res) {\n                return res;\n            }\n            const reqId = context.options.requestId;\n            log(\"[%s] Response code: %s %s\", reqId, res.statusCode, res.statusMessage);\n            if (verbose && res.body) {\n                log(\"[%s] Response body: %s\", reqId, stringifyBody(res));\n            }\n            return res;\n        },\n        onError: (err, context)=>{\n            const reqId = context.options.requestId;\n            if (!err) {\n                log(\"[%s] Error encountered, but handled by an earlier middleware\", reqId);\n                return err;\n            }\n            log(\"[%s] ERROR: %s\", reqId, err.message);\n            return err;\n        }\n    };\n}\nfunction stringifyBody(res) {\n    const contentType = (res.headers[\"content-type\"] || \"\").toLowerCase();\n    const isJson = contentType.indexOf(\"application/json\") !== -1;\n    return isJson ? tryFormat(res.body) : res.body;\n}\nfunction tryFormat(body) {\n    try {\n        const parsed = typeof body === \"string\" ? JSON.parse(body) : body;\n        return JSON.stringify(parsed, null, 2);\n    } catch (err) {\n        return body;\n    }\n}\nfunction headers(_headers) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return {\n        processOptions: (options)=>{\n            const existing = options.headers || {};\n            options.headers = opts.override ? Object.assign({}, existing, _headers) : Object.assign({}, _headers, existing);\n            return options;\n        }\n    };\n}\nclass HttpError extends Error {\n    constructor(res, ctx){\n        super();\n        const truncatedUrl = res.url.length > 400 ? \"\".concat(res.url.slice(0, 399), \"…\") : res.url;\n        let msg = \"\".concat(res.method, \"-request to \").concat(truncatedUrl, \" resulted in \");\n        msg += \"HTTP \".concat(res.statusCode, \" \").concat(res.statusMessage);\n        this.message = msg.trim();\n        this.response = res;\n        this.request = ctx.options;\n    }\n}\nfunction httpErrors() {\n    return {\n        onResponse: (res, ctx)=>{\n            const isHttpError = res.statusCode >= 400;\n            if (!isHttpError) {\n                return res;\n            }\n            throw new HttpError(res, ctx);\n        }\n    };\n}\nfunction injectResponse() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof opts.inject !== \"function\") {\n        throw new Error(\"`injectResponse` middleware requires a `inject` function\");\n    }\n    const inject = function inject2(prevValue, event) {\n        const response = opts.inject(event, prevValue);\n        if (!response) {\n            return prevValue;\n        }\n        const options = event.context.options;\n        return {\n            body: \"\",\n            url: options.url,\n            method: options.method,\n            headers: {},\n            statusCode: 200,\n            statusMessage: \"OK\",\n            ...response\n        };\n    };\n    return {\n        interceptRequest: inject\n    };\n}\nconst isBuffer = typeof Buffer === \"undefined\" ? ()=>false : (obj)=>Buffer.isBuffer(obj);\nconst serializeTypes = [\n    \"boolean\",\n    \"string\",\n    \"number\"\n];\nfunction jsonRequest() {\n    return {\n        processOptions: (options)=>{\n            const body = options.body;\n            if (!body) {\n                return options;\n            }\n            const isStream = typeof body.pipe === \"function\";\n            const shouldSerialize = !isStream && !isBuffer(body) && (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || (0,is_plain_object__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(body));\n            if (!shouldSerialize) {\n                return options;\n            }\n            return Object.assign({}, options, {\n                body: JSON.stringify(options.body),\n                headers: Object.assign({}, options.headers, {\n                    \"Content-Type\": \"application/json\"\n                })\n            });\n        }\n    };\n}\nfunction jsonResponse(opts) {\n    return {\n        onResponse: (response)=>{\n            const contentType = response.headers[\"content-type\"] || \"\";\n            const shouldDecode = opts && opts.force || contentType.indexOf(\"application/json\") !== -1;\n            if (!response.body || !contentType || !shouldDecode) {\n                return response;\n            }\n            return Object.assign({}, response, {\n                body: tryParse(response.body)\n            });\n        },\n        processOptions: (options)=>Object.assign({}, options, {\n                headers: Object.assign({\n                    Accept: \"application/json\"\n                }, options.headers)\n            })\n    };\n    function tryParse(body) {\n        try {\n            return JSON.parse(body);\n        } catch (err) {\n            err.message = \"Failed to parsed response body as JSON: \".concat(err.message);\n            throw err;\n        }\n    }\n}\nfunction isBrowserOptions(options) {\n    return typeof options === \"object\" && options !== null && !(\"protocol\" in options);\n}\nfunction mtls() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!config.ca) {\n        throw new Error('Required mtls option \"ca\" is missing');\n    }\n    if (!config.cert) {\n        throw new Error('Required mtls option \"cert\" is missing');\n    }\n    if (!config.key) {\n        throw new Error('Required mtls option \"key\" is missing');\n    }\n    return {\n        finalizeOptions: (options)=>{\n            if (isBrowserOptions(options)) {\n                return options;\n            }\n            const mtlsOpts = {\n                cert: config.cert,\n                key: config.key,\n                ca: config.ca\n            };\n            return Object.assign({}, options, mtlsOpts);\n        }\n    };\n}\nlet actualGlobal = {};\nif (typeof globalThis !== \"undefined\") {\n    actualGlobal = globalThis;\n} else if (false) {} else if (typeof global !== \"undefined\") {\n    actualGlobal = global;\n} else if (typeof self !== \"undefined\") {\n    actualGlobal = self;\n}\nvar global$1 = actualGlobal;\nfunction observable() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const Observable = // eslint-disable-next-line @typescript-eslint/no-explicit-any -- @TODO consider dropping checking for a global Observable since it's not on a standards track\n    opts.implementation || global$1.Observable;\n    if (!Observable) {\n        throw new Error(\"`Observable` is not available in global scope, and no implementation was passed\");\n    }\n    return {\n        onReturn: (channels, context)=>new Observable((observer)=>{\n                channels.error.subscribe((err)=>observer.error(err));\n                channels.progress.subscribe((event)=>observer.next(Object.assign({\n                        type: \"progress\"\n                    }, event)));\n                channels.response.subscribe((response)=>{\n                    observer.next(Object.assign({\n                        type: \"response\"\n                    }, response));\n                    observer.complete();\n                });\n                channels.request.publish(context);\n                return ()=>channels.abort.publish();\n            })\n    };\n}\nfunction progress() {\n    return {\n        onRequest: (evt)=>{\n            if (evt.adapter !== \"xhr\") {\n                return;\n            }\n            const xhr = evt.request;\n            const context = evt.context;\n            if (\"upload\" in xhr && \"onprogress\" in xhr.upload) {\n                xhr.upload.onprogress = handleProgress(\"upload\");\n            }\n            if (\"onprogress\" in xhr) {\n                xhr.onprogress = handleProgress(\"download\");\n            }\n            function handleProgress(stage) {\n                return (event)=>{\n                    const percent = event.lengthComputable ? event.loaded / event.total * 100 : -1;\n                    context.channels.progress.publish({\n                        stage,\n                        percent,\n                        total: event.total,\n                        loaded: event.loaded,\n                        lengthComputable: event.lengthComputable\n                    });\n                };\n            }\n        }\n    };\n}\nconst promise = function() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const PromiseImplementation = options.implementation || Promise;\n    if (!PromiseImplementation) {\n        throw new Error(\"`Promise` is not available in global scope, and no implementation was passed\");\n    }\n    return {\n        onReturn: (channels, context)=>new PromiseImplementation((resolve, reject)=>{\n                const cancel = context.options.cancelToken;\n                if (cancel) {\n                    cancel.promise.then((reason)=>{\n                        channels.abort.publish(reason);\n                        reject(reason);\n                    });\n                }\n                channels.error.subscribe(reject);\n                channels.response.subscribe((response)=>{\n                    resolve(options.onlyBody ? response.body : response);\n                });\n                setTimeout(()=>{\n                    try {\n                        channels.request.publish(context);\n                    } catch (err) {\n                        reject(err);\n                    }\n                }, 0);\n            })\n    };\n};\nclass Cancel {\n    constructor(message){\n        this.__CANCEL__ = true;\n        this.message = message;\n    }\n    toString() {\n        return \"Cancel\".concat(this.message ? \": \".concat(this.message) : \"\");\n    }\n}\nconst _CancelToken = class _CancelToken {\n    constructor(executor){\n        if (typeof executor !== \"function\") {\n            throw new TypeError(\"executor must be a function.\");\n        }\n        let resolvePromise = null;\n        this.promise = new Promise((resolve)=>{\n            resolvePromise = resolve;\n        });\n        executor((message)=>{\n            if (this.reason) {\n                return;\n            }\n            this.reason = new Cancel(message);\n            resolvePromise(this.reason);\n        });\n    }\n};\n_CancelToken.source = ()=>{\n    let cancel;\n    const token = new _CancelToken((can)=>{\n        cancel = can;\n    });\n    return {\n        token,\n        cancel\n    };\n};\nlet CancelToken = _CancelToken;\nconst isCancel = (value)=>!!(value && (value == null ? void 0 : value.__CANCEL__));\npromise.Cancel = Cancel;\npromise.CancelToken = CancelToken;\npromise.isCancel = isCancel;\nfunction proxy(_proxy) {\n    if (_proxy !== false && (!_proxy || !_proxy.host)) {\n        throw new Error(\"Proxy middleware takes an object of host, port and auth properties\");\n    }\n    return {\n        processOptions: (options)=>Object.assign({\n                proxy: _proxy\n            }, options)\n    };\n}\nvar defaultShouldRetry = (err, attempt, options)=>{\n    if (options.method !== \"GET\" && options.method !== \"HEAD\") {\n        return false;\n    }\n    return err.isNetworkError || false;\n};\nconst isStream = (stream)=>stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\nvar sharedRetry = (opts)=>{\n    const maxRetries = opts.maxRetries || 5;\n    const retryDelay = opts.retryDelay || getRetryDelay;\n    const allowRetry = opts.shouldRetry;\n    return {\n        onError: (err, context)=>{\n            const options = context.options;\n            const max = options.maxRetries || maxRetries;\n            const shouldRetry = options.shouldRetry || allowRetry;\n            const attemptNumber = options.attemptNumber || 0;\n            if (isStream(options.body)) {\n                return err;\n            }\n            if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n                return err;\n            }\n            const newContext = Object.assign({}, context, {\n                options: Object.assign({}, options, {\n                    attemptNumber: attemptNumber + 1\n                })\n            });\n            setTimeout(()=>context.channels.request.publish(newContext), retryDelay(attemptNumber));\n            return null;\n        }\n    };\n};\nfunction getRetryDelay(attemptNum) {\n    return 100 * Math.pow(2, attemptNum) + Math.random() * 100;\n}\nconst retry = function() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return sharedRetry({\n        shouldRetry: defaultShouldRetry,\n        ...opts\n    });\n};\nretry.shouldRetry = defaultShouldRetry;\nfunction encode(data) {\n    const query = new URLSearchParams();\n    const nest = (name, _value)=>{\n        const value = _value instanceof Set ? Array.from(_value) : _value;\n        if (Array.isArray(value)) {\n            if (value.length) {\n                for(const index in value){\n                    nest(\"\".concat(name, \"[\").concat(index, \"]\"), value[index]);\n                }\n            } else {\n                query.append(\"\".concat(name, \"[]\"), \"\");\n            }\n        } else if (typeof value === \"object\" && value !== null) {\n            for (const [key, obj] of Object.entries(value)){\n                nest(\"\".concat(name, \"[\").concat(key, \"]\"), obj);\n            }\n        } else {\n            query.append(name, value);\n        }\n    };\n    for (const [key, value] of Object.entries(data)){\n        nest(key, value);\n    }\n    return query.toString();\n}\nfunction urlEncoded() {\n    return {\n        processOptions: (options)=>{\n            const body = options.body;\n            if (!body) {\n                return options;\n            }\n            const isStream = typeof body.pipe === \"function\";\n            const shouldSerialize = !isStream && !isBuffer(body) && (0,is_plain_object__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(body);\n            if (!shouldSerialize) {\n                return options;\n            }\n            return {\n                ...options,\n                body: encode(options.body),\n                headers: {\n                    ...options.headers,\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            };\n        }\n    };\n}\nfunction buildKeepAlive(agent) {\n    return function keepAlive() {\n        let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const ms = config.ms || 1e3;\n        const maxFree = config.maxFree || 256;\n        const agentOptions = {\n            keepAlive: true,\n            keepAliveMsecs: ms,\n            maxFreeSockets: maxFree\n        };\n        return agent(agentOptions);\n    };\n}\nconst keepAlive = buildKeepAlive(agent);\n //# sourceMappingURL=middleware.browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/get-it/dist/middleware.browser.js\n");

/***/ })

};
;